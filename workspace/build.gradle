buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE"
    }
}

group 'br.udesc'
version '1.0.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

configurations {
    deployerJars
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile 'org.springframework.boot:spring-boot-starter-web:1.5.8.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.5.8.RELEASE'

    deployerJars "org.apache.maven.wagon:wagon-http:2.10"
}



repositories {
    mavenCentral()

    maven {
        credentials {
            username = "$System.env.NEXUS_UDESC_USERNAME"
            password = "$System.env.NEXUS_UDESC_PASSWORD"
        }
        url "http://nexus.hogenn.com/nexus/content/repositories/releases"

    }

    maven {
        credentials {
            username = "$System.env.NEXUS_UDESC_USERNAME"
            password = "$System.env.NEXUS_UDESC_PASSWORD"
        }
        url "http://nexus.hogenn.com/nexus/content/repositories/snapshots"
    }
}



uploadArchives {
    repositories {
        mavenDeployer {
            def credentials = [
                    userName: "$System.env.NEXUS_UDESC_USERNAME",
                    password: "$System.env.NEXUS_UDESC_PASSWORD"
            ]
            configuration = configurations.deployerJars

            repository(url: "http://nexus.hogenn.com/nexus/content/repositories/releases") {
                authentication(credentials)
            }
            snapshotRepository(url: "http://nexus.hogenn.com/nexus/content/repositories/snapshots") {
                authentication(credentials)
            }
        }
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}
jar.dependsOn(copyToLib)

def mainClassName = 'br.udesc.App'

jar {
    manifest {
        attributes 'Main-Class': mainClassName,
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
        // Keep jar clean:
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    }
}

task createProperties(dependsOn: processResources) {

   doLast {
       def folder = new File( "$buildDir/resources/main/" )
       if( !folder.exists() ) {
           folder.mkdirs()
       }

       new File("$buildDir/resources/main/version.properties").withWriter { w ->
           Properties p = new Properties()
           p['version'] = project.version.toString()
           p['timestamp'] = String.valueOf(System.currentTimeMillis())
           p['build_number'] = System.getenv("CIRCLE_BUILD_NUM") != null ? System.getenv("CIRCLE_BUILD_NUM") : ""
           p.store w, null
       }
   }
}

classes {
    dependsOn createProperties
}
